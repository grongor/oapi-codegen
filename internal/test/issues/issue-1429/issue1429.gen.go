// Package param provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package param

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for Test1FieldA.
const (
	Bar Test1FieldA = "bar"
	Foo Test1FieldA = "foo"
)

// Test defines model for test.
type Test struct {
	union json.RawMessage
}

// Test0 defines model for .
type Test0 struct {
	FieldA *string `json:"fieldA,omitempty"`
}

// Test1 defines model for .
type Test1 struct {
	FieldA *Test1FieldA `json:"fieldA,omitempty"`
}

// Test1FieldA defines model for Test.1.FieldA.
type Test1FieldA string

// AsTest0 returns the union data inside the Test as a Test0
func (t Test) AsTest0() (Test0, error) {
	var body Test0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTest0 overwrites any union data inside the Test as the provided Test0
func (t *Test) FromTest0(v Test0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTest0 performs a merge with any union data inside the Test, using the provided Test0
func (t *Test) MergeTest0(v Test0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTest1 returns the union data inside the Test as a Test1
func (t Test) AsTest1() (Test1, error) {
	var body Test1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTest1 overwrites any union data inside the Test as the provided Test1
func (t *Test) FromTest1(v Test1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTest1 performs a merge with any union data inside the Test, using the provided Test1
func (t *Test) MergeTest1(v Test1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Test) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Test) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
